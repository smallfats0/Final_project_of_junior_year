/*
 Navicat Premium Data Transfer

 Source Server         : conn
 Source Server Type    : MySQL
 Source Server Version : 80026
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 80026
 File Encoding         : 65001

 Date: 10/07/2024 11:01:35
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for blog
-- ----------------------------
DROP TABLE IF EXISTS `blog`;
CREATE TABLE `blog`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `bid` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '博客id',
  `title` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '博客标题',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '正文',
  `sort` int NOT NULL COMMENT '排序  0普通 1置顶',
  `views` int NOT NULL COMMENT '浏览量',
  `author_id` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '作者id',
  `author_name` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '作者姓名',
  `author_avatar` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '作者头像',
  `category_id` int NOT NULL COMMENT '分类id',
  `category_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '分类名称',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '修改时间',
  `original` int NOT NULL COMMENT '是否原创  0 否  1是',
  PRIMARY KEY (`id`) USING BTREE,
  FULLTEXT INDEX `indexfull_title_content`(`title`, `content`) WITH PARSER `ngram`
) ENGINE = InnoDB AUTO_INCREMENT = 132 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of blog
-- ----------------------------
INSERT INTO `blog` VALUES (73, '29b3308783e54cf994b26801097d88af', '随想录', '内容', 0, 3, '506a99761b1346c7b9c324121af54e3a', 'wasd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 16:56:10', '2024-07-08 16:56:10', 1);
INSERT INTO `blog` VALUES (77, '758cb6b5bdeb4d499bf5ddb9a29ba1d4', 'edwq', 'wqdqwdqw', 0, 4, '506a99761b1346c7b9c324121af54e3a', 'wasd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 03:56:07', '2024-07-08 03:56:07', 1);
INSERT INTO `blog` VALUES (105, '340250e836f34bb78a3f511eb539fcaf', '前端', '我不会前端', 0, 1, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 3, '前端', '2024-07-08 18:14:50', '2024-07-08 18:14:50', 1);
INSERT INTO `blog` VALUES (107, '1a97b545cdda4e05ad846ddb7ece8e3e', '云原生微服务治理 第四章 Spring Cloud Netflix 服务注册/发现组件Eureka', '系列文章目录\r\n第一章 Java线程池技术应用\r\n第二章 CountDownLatch和Semaphone的应用\r\n第三章 Spring Cloud 简介\r\n第四章 Spring Cloud Netflix 之 Eureka\r\n\r\n\r\n文章目录\r\n系列文章目录\r\n@[TOC](文章目录)\r\n前言\r\n1、Eureka 两大组件\r\n2、Eureka 服务注册与发现\r\n3、案例\r\n3.1、创建主工程\r\n3.1.1、主工程pom.xml配置\r\n3.2、创建子公共模块common-api\r\n3.2.1、添加module\r\n3.2.2、pom.xml配置\r\n3.2.3、maven非springboot项目，增加main入口\r\n3.3、创建Eureka注册中心模块eureka-server\r\n3.3.1、配置pom.xml\r\n3.3.2、配置application.yml\r\n3.3.3、启动eureka-server\r\n3.3.3.1、编译eureka-server\r\n3.3.3.2、运行EurekaServerApplication.java文件\r\n3.4、创建用户服务模块user-service![在这里插入图片描述](https://img-blog.csdnimg.cn/e52d0b166629469baa1cd934714c9831.png)\r\n3.4.1、配置pom.xml\r\n3.4.2、配置application.yml\r\n3.4.3、启动user-service\r\n3.4.3.1、编译user-service\r\n3.4.3.2、运行UserApplication.java文件\r\n3.4.3.3、测试\r\n3.5、查看编译后的包\r\n小结\r\n前言\r\n今天我们讲解Spring Cloud微服务的第一代实现：Spring Cloud Netflix\r\nEureka 是 Netflix 公司开发的一款开源的服务注册与发现组件。\r\nSpring Cloud 使用 Spring Boot 思想为 Eureka 增加了自动化配置，开发人员只需要引入相关依赖和注解，就能将 Spring Boot 构建的微服务轻松地与 Eureka 进行整合。\r\n\r\n附简单的Netflix微服务架构图（Zuul太麻烦直接由Gateway替代）：\r\n\r\nAlibaba微服务架构图：\r\n\r\n想在Netflix、Alibaba之间切换的，可以看下图，替换掉相关组件，核心业务代码基本没有太大变化。\r\n\r\n\r\n1、Eureka 两大组件\r\nEureka 采用 CS（Client/Server，客户端/服务器） 架构，它包括以下两大组件：Eureka Server、Eureka Client\r\n\r\n组件	介绍\r\nEureka Server	Eureka 服务注册中心，主要用于提供服务注册功能\r\nEureka Client	Eureka 客户端，通常指的是微服务系统中各个微服务\r\n2、Eureka 服务注册与发现\r\n\r\n\r\n功能	介绍\r\n服务注册中心（Register Service）	它是一个 Eureka Server，用于提供服务注册和发现功能。\r\n服务提供者（Provider Service）	它是一个 Eureka Client，用于提供服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现。\r\n服务消费者（Consumer Service）	它是一个 Eureka Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。\r\n3、案例\r\n3.1、创建主工程\r\n名称：SpringCloud\r\n\r\n\r\n3.1.1、主工程pom.xml配置\r\n\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n   <modelVersion>4.0.0</modelVersion>\r\n   <packaging>pom</packaging>\r\n   <parent>\r\n      <groupId>org.springframework.boot</groupId>\r\n      <artifactId>spring-boot-starter-parent</artifactId>\r\n      <version>2.6.13</version>\r\n      <relativePath/> <!-- lookup parent from repository -->\r\n   </parent>\r\n   <groupId>com.hqyj</groupId>\r\n   <artifactId>drp</artifactId>\r\n   <version>0.0.1-SNAPSHOT</version>\r\n   <name>drp-parent</name>\r\n   <description>Demo project for Spring Boot</description>\r\n   <properties>\r\n      <maven.compiler.source>8</maven.compiler.source>\r\n      <maven.compiler.target>8</maven.compiler.target>\r\n      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n      <maven.compiler.source>1.8</maven.compiler.source>\r\n      <maven.compiler.target>1.8</maven.compiler.target>\r\n      <junit.version>4.12</junit.version>\r\n      <log4j.version>1.2.17</log4j.version>\r\n      <lombok.version>1.16.18</lombok.version>\r\n   </properties>\r\n   <dependencyManagement>\r\n      <dependencies>\r\n         <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-dependencies</artifactId>\r\n            <version>2021.0.5</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n         </dependency>\r\n      </dependencies>\r\n   </dependencyManagement>\r\n\r\n   <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <version>3.5.1</version>\r\n                <configuration>\r\n                    <source>${maven.compiler.source}</source>\r\n                    <target>${maven.compiler.target}</target>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n\r\n    </build>\r\n\r\n</project>\r\n\r\n\r\n3.2、创建子公共模块common-api\r\n3.2.1、添加module\r\n\r\n\r\n\r\n3.2.2、pom.xml配置\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>com.hqyj</groupId>\r\n        <artifactId>SpringCloud</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <artifactId>common-api</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>8</maven.compiler.source>\r\n        <maven.compiler.target>8</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n</project>\r\n\r\n\r\n3.2.3、maven非springboot项目，增加main入口\r\n添加Main.java，指定main入口，防止Maven package / install打包失败\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"common-api\");\r\n    }\r\n\r\n}\r\n\r\n3.3、创建Eureka注册中心模块eureka-server\r\n\r\n\r\n3.3.1、配置pom.xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>com.hqyj</groupId>\r\n        <artifactId>SpringCloud</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <artifactId>eureka-server</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>8</maven.compiler.source>\r\n        <maven.compiler.target>8</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <skip-tests>true</skip-tests>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <optional>true</optional>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.github.enesusta</groupId>\r\n            <artifactId>spring-devtools</artifactId>\r\n            <version>1.0.1</version>\r\n            <optional>true</optional>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n    \r\n</project>\r\n\r\n\r\n3.3.2、配置application.yml\r\n在resource目录下，新建application.yml文件\r\n\r\n\r\n编辑application.yml文件，添加eureka配置\r\n\r\nserver:\r\n  port: 7001\r\n\r\neureka:\r\n  instance:\r\n    hostname: localhost #eureka服务端的实例名称，\r\n  client:\r\n    register-with-eureka: false #false表示不向注册中心注册自己。\r\n    fetch-registry: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务\r\n    service-url:\r\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ #单机版服务注册中心\r\n\r\n\r\n3.3.3、启动eureka-server\r\n创建EurekaServerApplication.java启动文件\r\n\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\r\n\r\n@SpringBootApplication\r\n@EnableEurekaServer\r\npublic class EurekaServerApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(EurekaServerApplication.class,args);\r\n    }\r\n}\r\n\r\n3.3.3.1、编译eureka-server\r\n\r\n\r\n\r\n3.3.3.2、运行EurekaServerApplication.java文件\r\n\r\n启动：http://localhost:7001/\r\n\r\n3.4、创建用户服务模块user-service\r\n3.4.1、配置pom.xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>com.hqyj</groupId>\r\n        <artifactId>SpringCloud</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <artifactId>user-service</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>8</maven.compiler.source>\r\n        <maven.compiler.target>8</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <!--devtools 开发工具-->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n            <optional>true</optional>\r\n        </dependency>\r\n        <!--Spring Boot 测试-->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <!--junit 测试-->\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <version>4.12</version>\r\n        </dependency>\r\n        <!-- 修改后立即生效，热部署 -->\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>springloaded</artifactId>\r\n            <version>1.2.8.RELEASE</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.hqyj</groupId>\r\n            <artifactId>common-api</artifactId>\r\n            <version>0.0.1-SNAPSHOT</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n</project>\r\n\r\n\r\n3.4.2、配置application.yml\r\nserver:\r\n  port: 8001\r\nspring:\r\n  application:\r\n    name: user-service  #微服务名称\r\neureka:\r\n  client: #将客户端注册到 eureka 服务列表内\r\n    service-url:\r\n      defaultZone: http://localhost:7001/eureka  #这个地址是 7001注册中心在 application.yml 中暴露出来额注册地址 （单机版）\r\n\r\n9\r\n3.4.3、启动user-service\r\n创建UserApplication.java启动文件\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\r\n\r\n@SpringBootApplication\r\n@EnableDiscoveryClient\r\npublic class UserApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(UserApplication.class,args);\r\n    }\r\n}\r\n\r\n3.4.3.1、编译user-service\r\n\r\n\r\n\r\n3.4.3.2、运行UserApplication.java文件\r\n\r\n\r\n3.4.3.3、测试\r\nhttp://localhost:8001/user/userInfoList\r\n\r\n3.5、查看编译后的包\r\n\r\n\r\n\r\n小结\r\nEureka 作为Netflix 公司开发的一款开源的服务注册与发现组件，还是十分经典的。在服务注册与发现这一块，也是十分优秀，有兴趣的同学可以去下载Eureka的源码研究一下，看看Eureka是如何实现服务注册，调用端是如何发现服务并调用，最后再看看Eureka里同一个服务多台机器实例是如何实现负载均衡调用的。\r\n', 0, 4, '506a99761b1346c7b9c324121af54e3a', 'wasd', '/images/avatar/man.jpg', 4, '后端', '2024-07-09 13:19:46', '2024-07-09 13:19:46', 0);
INSERT INTO `blog` VALUES (108, 'b1971eb9cb0040c0904c5694db7c9417', '云游戏', '# 畅想游戏世界\r\n\r\n\r\n游戏是一个充满创造力和想象力的世界，未来的游戏发展将给玩家带来更加震撼和沉浸的体验。让我们一起畅想以下几个方面的突破：\r\n\r\n## 1. 虚拟现实游戏\r\n\r\n虚拟现实（VR）技术将带来全新的游戏体验，让玩家身临其境地探索虚拟世界。以下是一些可能的发展趋势：\r\n\r\n- 更高分辨率和更快刷新率：提升虚拟现实设备的图像质量和运行速度，增强沉浸感。\r\n- 触觉反馈技术：通过模拟触觉感受，使玩家能够更真实地感知虚拟环境。\r\n\r\n## 2. 增强现实游戏\r\n\r\n增强现实（AR）技术将融合现实世界和虚拟元素，为玩家创造全新的游戏体验。以下是一些可能的发展趋势：\r\n\r\n- 真实物体交互：通过AR技术，现实世界中的物体可以与虚拟元素进行交互，增加游戏的可玩性。\r\n- 多人协作AR游戏：多人参与的AR游戏将使玩家能够与朋友一起合作解谜或进行对战。\r\n\r\n## 3. 云游戏\r\n\r\n云游戏技术将使玩家不再需要本地硬件来运行游戏，而是通过云端服务器实时流式传输游戏内容。以下是一些可能的发展趋势：\r\n\r\n- 更低的延迟和更高的画质：随着云端技术的不断进步，云游戏将提供更好的游戏体验。\r\n- 跨平台游戏：云游戏可以让玩家在不同设备上无缝切换和继续游戏，增加游戏的灵活性。\r\n\r\n让我们期待未来的游戏世界，去探索更多可能性！\r\n\r\n有关游戏话题的讨论，请留下您的见解和意见', 0, 6, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 14:53:39', '2024-07-08 14:53:39', 1);
INSERT INTO `blog` VALUES (109, '85d4643a999d4ca1ab7a26a699ed3121', '前缀和', '# CPlusPlus_前缀和&差分\r\n\r\n前缀和：主要思想：涉及到求和，不是等输入范围再求和，而是提前把 各种和都给求好\r\n\r\n有一个数组an，再定义一个前缀和数组  Sn ,  Si 就是 a1+a2+...an ;  \r\n\r\n可以快速地求 数列中 L 到 R 之间的数 ；\r\n\r\n先将S0=0；然后 数组赋值从1开始；\r\n\r\n差分：是前缀和的逆运算 ，将已知数组作为和数组，求 另一个数组；差分不需要考虑如何构造\r\n\r\n==差分==\r\n\r\n输入一个长度为 nn 的整数序列。\r\n\r\n接下来输入 mm 个操作，每个操作包含三个整数 l,r,cl,r,c，表示将序列中 [l,r][l,r] 之间的每个数加上 cc。\r\n\r\n请你输出进行完所有操作后的序列。\r\n\r\n#### 输入格式\r\n\r\n第一行包含两个整数 nn 和 mm。\r\n\r\n第二行包含 nn 个整数，表示整数序列。\r\n\r\n接下来 mm 行，每行包含三个整数 l，r，cl，r，c，表示一个操作。\r\n\r\n#### 输出格式\r\n\r\n共一行，包含 nn 个整数，表示最终序列。\r\n\r\n#### 数据范围\r\n\r\n1≤n,m≤1000001≤n,m≤100000,\r\n1≤l≤r≤n1≤l≤r≤n,\r\n−1000≤c≤1000−1000≤c≤1000,\r\n−1000≤整数序列中元素的值≤1000−1000≤整数序列中元素的值≤1000\r\n\r\n#### 输入样例：\r\n\r\n```\r\n6 3\r\n1 2 2 1 2 1\r\n1 3 1\r\n3 5 1\r\n1 6 1\r\n```\r\n\r\n#### 输出样例：\r\n\r\n```\r\n3 4 5 3 4 2\r\n```\r\n\r\n######  主要是Insert函数,最后再输出差分数组的前缀和；\r\n\r\n```C++\r\n#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 100010;\r\n\r\nint n, m;\r\nint a[N], b[N];\r\n\r\nvoid insert(int l, int r, int c)\r\n{\r\n    b[l] += c;\r\n    b[r + 1] -= c;\r\n}\r\n\r\nint main()\r\n{\r\n    scanf(\"%d%d\", &n, &m);\r\n    for (int i = 1; i <= n; i ++ ) scanf(\"%d\", &a[i]);\r\n\r\n    for (int i = 1; i <= n; i ++ ) insert(i, i, a[i]);\r\n\r\n    while (m -- )\r\n    {\r\n        int l, r, c;\r\n        scanf(\"%d%d%d\", &l, &r, &c);\r\n        insert(l, r, c);\r\n    }\r\n\r\n    for (int i = 1; i <= n; i ++ ) {\r\n        b[i] += b[i - 1];\r\n        printf(\"%d\",b[i]);\r\n    }\r\n    \r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n==差分==\r\n\r\n输入一个 nn 行 mm 列的整数矩阵，再输入 qq 个操作，每个操作包含五个整数 x1,y1,x2,y2,cx1,y1,x2,y2,c，其中 (x1,y1)(x1,y1) 和 (x2,y2)(x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。\r\n\r\n每个操作都要将选中的子矩阵中的每个元素的值加上 cc。\r\n\r\n请你将进行完所有操作后的矩阵输出。\r\n\r\n#### 输入格式\r\n\r\n第一行包含整数 n,m,qn,m,q。\r\n\r\n接下来 nn 行，每行包含 mm 个整数，表示整数矩阵。\r\n\r\n接下来 qq 行，每行包含 55 个整数 x1,y1,x2,y2,cx1,y1,x2,y2,c，表示一个操作。\r\n\r\n#### 输出格式\r\n\r\n共 nn 行，每行 mm 个整数，表示所有操作进行完毕后的最终矩阵。\r\n\r\n#### 数据范围\r\n\r\n1≤n,m≤10001≤n,m≤1000,\r\n1≤q≤1000001≤q≤100000,\r\n1≤x1≤x2≤n1≤x1≤x2≤n,\r\n1≤y1≤y2≤m1≤y1≤y2≤m,\r\n−1000≤c≤1000−1000≤c≤1000,\r\n−1000≤矩阵内元素的值≤1000−1000≤矩阵内元素的值≤1000\r\n\r\n#### 输入样例：\r\n\r\n```\r\n3 4 3\r\n1 2 2 1\r\n3 2 2 1\r\n1 1 1 1\r\n1 1 2 2 1\r\n1 3 2 3 2\r\n3 1 3 4 1\r\n```\r\n\r\n#### 输出样例：\r\n\r\n```\r\n2 3 4 1\r\n4 3 4 1\r\n2 2 2 2\r\n```\r\n\r\n类比一维：\r\n\r\n```C++\r\n#include <iostream>\r\n#include <cstdio>\r\nusing namespace std;\r\nconst int N=1010;\r\nint n,m,p;\r\nint a[N][N],b[N][N];\r\n\r\nvoid insert(int x1,int y1,int x2,int y2,int c){\r\n	b[x1][y1]+=c;\r\n	b[x2+1][y1]-=c;\r\n	b[x1][y2+1]-=c;\r\n	b[x2+1][y2+1]+=c;\r\n}\r\nint main(void){\r\n	scanf(\"%d%d%d\",&n,&m,&p);\r\n	\r\n	for(int i=1;i<=n;i++)\r\n		for(int j=1;j<=m;j++)\r\n			scanf(\"%d\",&a[i][j]);\r\n	\r\n	for(int i=1;i<=n;i++){\r\n		for(int j=1;j<=m;j++){\r\n			insert(i,j,i,j,a[i][j]);\r\n		}\r\n	}	\r\n	\r\n	while(p--){\r\n		int x1,y1,x2,y2,c;\r\n		scanf(\"%d%d%d%d%d\",&x1,&y1,&x2,&y2,&c);\r\n		\r\n		insert(x1,y1,x2,y2,c);\r\n		\r\n	}\r\n	\r\n	for(int i=1;i<=n;i++){\r\n		for(int j=1;j<=m;j++){\r\n			b[i][j]+=b[i][j-1]+b[i-1][j]-b[i-1][j-1];\r\n			printf(\"%d \",b[i][j]);\r\n		}\r\n		printf(\"\\n\");\r\n	}\r\n	return 0;\r\n}\r\n```\r\n\r\n', 0, 3, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 15:04:37', '2024-07-08 15:04:37', 1);
INSERT INTO `blog` VALUES (110, 'fdc01c8b184346ebb4fd34bd4c2a7c41', '报告检验', '哈哈哈哈', 0, 1, '506a99761b1346c7b9c324121af54e3a', 'wasd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 15:54:08', '2024-07-08 15:54:08', 1);
INSERT INTO `blog` VALUES (111, 'bb3e80ab3c7d404baa02db8997e0a5f4', '总结报告', '让我水一下好吧', 0, 0, '506a99761b1346c7b9c324121af54e3a', 'wasd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 15:55:35', '2024-07-08 15:55:35', 1);
INSERT INTO `blog` VALUES (113, '0045889a04b64608bf5464c9afc667bf', 'Java入门', '# Java基础知识\r\n\r\nJava是一种广泛应用于软件开发的高级编程语言。它具有简单、可靠、安全和跨平台等特点，被广泛应用于Web开发、移动应用开发和大数据处理等领域。\r\n\r\n## 1. Java语言特点\r\n\r\n- **面向对象**：Java是一种纯粹的面向对象编程语言，支持封装、继承和多态等面向对象的特性。\r\n- **跨平台性**：使用Java编写的程序可以在不同的操作系统上运行，这得益于Java虚拟机（JVM）的存在。\r\n- **自动内存管理**：Java提供了自动内存管理机制，通过垃圾回收器自动管理内存分配和释放，减少了开发者对内存管理的负担。\r\n- **丰富的类库**：Java类库提供了大量的API，包括字符串处理、网络通信、图形界面、数据库连接等功能，方便开发人员快速构建应用程序。\r\n\r\n## 2. Java基本语法\r\n\r\n### 2.1 变量与数据类型\r\n\r\nJava是一种强类型语言，所有变量都必须先声明后使用。Java提供了多种数据类型，如整数型、浮点型、字符型、布尔型等。\r\n\r\n```java\r\nint num = 10;\r\ndouble pi = 3.14;\r\nchar ch = \'A\';\r\nboolean flag = true;\r\n```\r\n\r\n### 2.2 控制流程\r\n\r\nJava提供了多种控制流程语句，如条件语句（if-else）、循环语句（for、while、do-while）和选择语句（switch-case）等。\r\n\r\n```java\r\nint score = 80;\r\n\r\nif (score >= 60) {\r\n    System.out.println(\"及格\");\r\n} else {\r\n    System.out.println(\"不及格\");\r\n}\r\n\r\nfor (int i = 0; i < 5; i++) {\r\n    System.out.println(i);\r\n}\r\n\r\nswitch (score) {\r\n    case 90:\r\n        System.out.println(\"优秀\");\r\n        break;\r\n    case 80:\r\n        System.out.println(\"良好\");\r\n        break;\r\n    default:\r\n        System.out.println(\"其他\");\r\n}\r\n```\r\n\r\n### 2.3 函数与类\r\n\r\n在Java中，函数被称为方法，可以通过定义类来组织方法。一个Java程序至少包含一个类，并且有一个特殊的入口方法`main`。\r\n\r\n```java\r\npublic class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello, World!\");\r\n    }\r\n\r\n    public void sayHello() {\r\n        System.out.println(\"Hello!\");\r\n    }\r\n}\r\n```\r\n\r\n## 3. Java面向对象编程\r\n\r\nJava是一种纯粹的面向对象编程语言，所有代码都必须位于类中。在Java中，类是构建对象的模板，对象通过实例化类而创建。\r\n\r\n```java\r\npublic class Person {\r\n    private String name;\r\n    private int age;\r\n\r\n    public Person(String name, int age) {\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n\r\n    public void sayHello() {\r\n        System.out.println(\"Hello, my name is \" + name);\r\n    }\r\n}\r\n```\r\n\r\n```java\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Person person = new Person(\"Alice\", 20);\r\n        person.sayHello();\r\n    }\r\n}\r\n```\r\n\r\n以上是一个简单的Java类和使用示例，展示了面向对象编程的基本概念。\r\n\r\n这只是Java语言的一小部分内容，Java还包括异常处理、多线程、IO操作等丰富的特性和功能。希望这篇文章能为你提供Java基础知识的一个概览，让你更好地了解和学习Java编程。如果你对Java感兴趣，可以进一步深入学习和探讨。', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 4, '后端', '2024-07-08 14:51:19', '2024-07-08 14:51:19', 1);
INSERT INTO `blog` VALUES (114, 'd8d7e5e3c06e44a78fc4fe9b65492f02', 'Html', '\r\n# 前端开发\r\n\r\n## HTML\r\n\r\nHTML是用于构建网页结构的标记语言。以下是一个简单的HTML代码示例：\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>我的网页</title>\r\n</head>\r\n<body>\r\n  <h1>欢迎访问我的网页！</h1>\r\n  <p>这是一个段落。</p>\r\n</body>\r\n</html>\r\n```\r\n\r\n## CSS\r\n\r\nCSS用于为网页添加样式和布局。以下是一个基本的CSS代码示例：\r\n\r\n```css\r\nh1 {\r\n  color: blue;\r\n  font-size: 24px;\r\n}\r\n\r\np {\r\n  color: red;\r\n}\r\n```\r\n\r\n## JavaScript\r\n\r\nJavaScript是一种用于在网页上添加交互性和动态功能的脚本语言。以下是一个简单的JavaScript代码示例：\r\n\r\n```javascript\r\nlet name = prompt(\"请输入您的名字:\");\r\nalert(\"你好，\" + name + \"!\");\r\n```\r\n\r\n# 后端开发\r\n\r\n## Node.js\r\n\r\nNode.js是一个基于Chrome V8引擎的JavaScript运行环境，用于构建可扩展的网络应用程序。以下是一个使用Node.js创建HTTP服务器的示例代码：\r\n\r\n```javascript\r\nconst http = require(\'http\');\r\n\r\nconst server = http.createServer((req, res) => {\r\n  res.statusCode = 200;\r\n  res.setHeader(\'Content-Type\', \'text/plain\');\r\n  res.end(\'Hello, World!\\n\');\r\n});\r\n\r\nserver.listen(3000, \'localhost\', () => {\r\n  console.log(\'服务器正在运行...\');\r\n});\r\n```\r\n\r\n## Express.js\r\n\r\nExpress.js是一个基于Node.js的Web应用程序框架，简化了后端开发流程。以下是一个使用Express.js创建简单API的示例代码：\r\n\r\n```javascript\r\nconst express = require(\'express\');\r\nconst app = express();\r\nconst port = 3000;\r\n\r\napp.get(\'/\', (req, res) => {\r\n  res.send(\'Hello, World!\');\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`服务器正在运行在 http://localhost:${port}`);\r\n});\r\n```\r\n\r\n这只是一些示例代码，您可以根据自己的需求进行修改和扩展。希望对您有所帮助！', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 3, '前端', '2024-07-08 14:53:17', '2024-07-08 14:53:17', 1);
INSERT INTO `blog` VALUES (115, 'a6b6a4c10bfb46b2a03c4f69851a58d9', 'Go语言', '# 关于Go编程语言\r\n\r\nGo是一种开源的静态类型编程语言，由Google团队于2007年启动的项目开发，并于2009年首次发布。Go被设计成简单、高效和易于使用的编程语言，以满足现代软件开发的需求。\r\n\r\n## 特点与优势\r\n\r\n### 并发编程\r\nGo内置了强大的并发支持，通过轻量级的Goroutine（协程）和通信机制，可以方便地实现并发编程。这使得Go在处理大规模任务和高并发情况下具有出色的性能。\r\n\r\n### 高效编译\r\nGo拥有快速的编译速度，它采用了垃圾回收器和即时编译技术，可以在短时间内将代码转化为机器码。这使得Go适合开发需要快速迭代和部署的应用程序。\r\n\r\n### 简洁易读\r\nGo的语法简洁而清晰，去除了一些其他编程语言中常见的复杂特性，如继承和构造函数。这让代码更易于理解、调试和维护，也提高了团队的开发效率。\r\n\r\n### 强大的标准库\r\nGo提供了丰富的标准库，涵盖了网络编程、文件处理、加密、并发等各个方面。这些标准库是Go的核心组成部分，使得开发者能够更快地构建功能丰富、高效的应用程序。\r\n\r\n### 跨平台支持\r\nGo支持多种操作系统和处理器架构，包括Windows、Linux、macOS等。这使得开发者可以在不同的平台上编写一次代码，然后轻松地进行跨平台部署。\r\n\r\n## 应用领域\r\n\r\n由于其并发性能和简洁易读的语法，Go被广泛应用于各个领域，包括：\r\n\r\n- 网络服务开发：Go的并发性能使其成为构建高性能网络服务的理想选择，如Web服务器、API服务等。\r\n- 分布式系统：Go的并发模型适用于处理大规模分布式系统的开发，例如容器技术（如Docker）和云计算平台（如Kubernetes）。\r\n- 数据库：Go生态系统中有许多优秀的数据库驱动程序，使其成为与数据库交互的强大工具。\r\n- 云原生应用程序：Go支持对微服务和容器化应用程序的构建，并且在云原生应用程序开发中有着广泛的应用。\r\n\r\n总体来说，Go作为一种现代化的编程语言，在软件开发领域表现出色，吸引了越来越多的开发者和企业的关注和采用。', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 14:54:02', '2024-07-08 14:54:02', 1);
INSERT INTO `blog` VALUES (116, 'f9bfd025d5d4436a9b03e400b54c6932', 'Mysql', '# MySQL 数据库简介\r\n\r\nMySQL是一个开源的关系型数据库管理系统，广泛用于Web应用程序的后台数据存储和管理。本文将为您介绍MySQL的基本概念和常见操作。\r\n\r\n## 安装和配置\r\n\r\n要使用MySQL，首先需要下载并安装MySQL服务器。根据您的操作系统，可以选择不同的安装包。安装完成后，还需要进行一些配置，例如设置root用户密码和访问权限等。\r\n\r\n## 连接到数据库\r\n\r\n连接到MySQL数据库需要使用MySQL命令行客户端或者其他图形化工具。通过指定主机名、端口号、用户名和密码等信息，可以建立到MySQL服务器的连接。\r\n\r\n## 创建数据库\r\n\r\n使用CREATE DATABASE语句可以创建一个新的数据库。在创建数据库时，还可以指定字符集和排序规则等参数。\r\n\r\n```\r\nCREATE DATABASE mydatabase;\r\n```\r\n\r\n## 创建表\r\n\r\n在数据库中，数据以表的形式组织和存储。使用CREATE TABLE语句可以创建一个新的表，并定义表的列和约束。\r\n\r\n```\r\nCREATE TABLE students (\r\n  id INT PRIMARY KEY,\r\n  name VARCHAR(50),\r\n  age INT\r\n);\r\n```\r\n\r\n## 插入数据\r\n\r\n使用INSERT INTO语句可以向表中插入新的数据。\r\n\r\n```\r\nINSERT INTO students (id, name, age) VALUES (1, \'Alice\', 20);\r\nINSERT INTO students (id, name, age) VALUES (2, \'Bob\', 22);\r\n```\r\n\r\n## 查询数据\r\n\r\n使用SELECT语句可以从表中检索数据。可以通过WHERE子句指定条件，对结果进行过滤。\r\n\r\n```\r\nSELECT * FROM students;\r\nSELECT name, age FROM students WHERE age > 20;\r\n```\r\n\r\n## 更新数据\r\n\r\n使用UPDATE语句可以更新表中的数据。\r\n\r\n```\r\nUPDATE students SET age = 21 WHERE id = 1;\r\n```\r\n\r\n## 删除数据\r\n\r\n使用DELETE语句可以从表中删除数据。\r\n\r\n```\r\nDELETE FROM students WHERE id = 2;\r\n```\r\n\r\n## 总结\r\n\r\nMySQL是一款强大且易于使用的关系型数据库管理系统。它提供了丰富的功能和灵活的查询语言，适用于各种规模的应用程序。通过掌握MySQL的基本操作，您可以更好地管理和利用数据库中的数据。\r\n\r\n希望本文可以帮助您快速入门MySQL，并在实际项目中得到应用！', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 14:54:33', '2024-07-08 14:54:33', 1);
INSERT INTO `blog` VALUES (117, 'c518087037d64fd1b0d2a3514de5940c', 'CSS', '# CSS（层叠样式表）简介\r\n\r\nCSS（Cascading Style Sheets）是一种用于描述网页样式和布局的标记语言。它被广泛应用于前端开发中，与HTML结合使用，用于提升网页的视觉效果和用户体验。\r\n\r\n## 选择器与样式规则\r\n\r\n在CSS中，通过选择器选取HTML元素，并为其定义样式规则。以下是一些常见的选择器示例：\r\n\r\n- 标签选择器：选择特定的HTML标签，如`p`、`h1`。\r\n- 类选择器：通过类名选择元素，以`.`开头，如`.container`。\r\n- ID选择器：通过ID属性选择元素，以`#`开头，如`#header`。\r\n- 属性选择器：通过元素的特定属性进行选择，如`input[type=\"text\"]`。\r\n\r\n样式规则由属性和值组成，用于定义所选元素的外观和行为。以下是一些常见的CSS属性示例：\r\n\r\n- `color`：设置文本颜色。\r\n- `font-size`：设置字体大小。\r\n- `background-color`：设置背景颜色。\r\n- `margin`：设置元素边距。\r\n- `padding`：设置内边距。\r\n- `border`：设置边框样式。\r\n\r\n## CSS盒模型\r\n\r\nCSS盒模型是一个基本概念，用于描述元素在页面上的布局和尺寸。每个HTML元素被视为一个矩形框，包括内容区域、内边距、边框和外边距。\r\n\r\n![CSS Box Model](https://mdn.mozillademos.org/files/15945/box-model.png)\r\n\r\n- 内容区域（Content）：包含元素的实际内容，如文本、图像等。\r\n- 内边距（Padding）：围绕内容区域的空白区域，用于分隔内容和边框。\r\n- 边框（Border）：位于内边距之外的边界线，可以设置样式、颜色和宽度。\r\n- 外边距（Margin）：围绕边框的空白区域，用于分隔元素与其他元素之间的距离。\r\n\r\n## CSS布局\r\n\r\nCSS提供了多种布局技术，用于排列和定位HTML元素。以下是一些常见的CSS布局技术：\r\n\r\n- 流动布局（Flow Layout）：元素按照其出现在HTML中的顺序自上而下进行布局。\r\n- 定位布局（Positioning Layout）：通过使用`position`属性和`top`、`right`、`bottom`、`left`属性对元素进行精确定位。\r\n- 弹性盒子布局（Flexbox Layout）：通过使用`display: flex`将父元素转化为弹性容器，使得子元素能够灵活地调整大小和位置。\r\n- 网格布局（Grid Layout）：通过使用`display: grid`将父元素转化为网格容器，以网格行和列的方式进行布局。\r\n\r\n## 响应式设计与媒体查询\r\n\r\n响应式设计是一种使网页能够在不同设备上自适应和良好显示的设计方法。CSS提供了媒体查询（Media Queries）技术，可根据设备的特性（如屏幕宽度、高度）调整样式规则。\r\n\r\n媒体查询示例：\r\n\r\n```css\r\n@media screen and (max-width: 768px) {\r\n  /* 在屏幕宽度小于等于768px时应用的样式 */\r\n  body {\r\n    font-size: 16px;\r\n  }\r\n}\r\n```\r\n\r\n## CSS预处理器和后处理器\r\n\r\nCSS预处理器和后处理器是基于CSS的扩展工具，增加了更强大的功能和开发效率。常见的CSS预处理器有Sass、Less和Stylus，它们引入了变量、嵌套、混合等功能。后处理器如PostCSS可以对CSS进行自动化的转换和优化。\r\n\r\n## 总结\r\n\r\nCSS是一种用于定义网页样式和布局的标记语言。通过选择器和样式规则，我们可以为HTML元素指定外观和行为。CSS盒模型描述了元素的布局和尺寸。CSS还提供了多种布局技术，响应式设计和预处理器/后处理器等工具，使前端开发更加灵活、高效和便捷。', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 3, '前端', '2024-07-08 14:55:34', '2024-07-08 14:55:34', 1);
INSERT INTO `blog` VALUES (118, '5a7df9563f844cf18ecb9a23aadff1a9', '网络编程', '# 网络编程语言简介\r\n\r\n网络编程是指在计算机网络中通过编程实现不同设备之间的数据交换和通信。下面将介绍几种常用的网络编程语言。\r\n\r\n## Java\r\n\r\nJava是一门广泛应用于网络编程的高级编程语言。它具有跨平台性，可以在不同操作系统上运行，在网络应用开发领域非常流行。Java提供了丰富的网络编程API，如Socket、ServerSocket、URL等类，使得开发者可以轻松地建立客户端-服务器模型、处理HTTP请求等。\r\n\r\n```java\r\nimport java.net.*;\r\nimport java.io.*;\r\n\r\npublic class NetworkExample {\r\n    public static void main(String[] args) {\r\n        try {\r\n            //创建Socket连接\r\n            Socket socket = new Socket(\"www.example.com\", 80);\r\n\r\n            //发送HTTP请求\r\n            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\r\n            out.println(\"GET / HTTP/1.1\");\r\n            out.println(\"Host: www.example.com\");\r\n            out.println();\r\n\r\n            //获取响应\r\n            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\r\n            String line;\r\n            while ((line = in.readLine()) != null) {\r\n                System.out.println(line);\r\n            }\r\n\r\n            //关闭连接\r\n            socket.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Python\r\n\r\nPython是一种动态、解释型的编程语言，在网络编程方面也非常强大。Python提供了丰富的标准库和第三方库，如socket、urllib、requests等，可轻松构建网络应用。Python还支持异步编程模型，如使用asyncio库可以实现高效的异步网络编程。\r\n\r\n```python\r\nimport socket\r\n\r\n#创建Socket连接\r\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\ns.connect((\"www.example.com\", 80))\r\n\r\n#发送HTTP请求\r\nrequest = \"GET / HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n\"\r\ns.send(request.encode())\r\n\r\n#接收响应\r\nresponse = s.recv(1024)\r\nwhile response:\r\n    print(response.decode())\r\n    response = s.recv(1024)\r\n\r\n#关闭连接\r\ns.close()\r\n```\r\n\r\n## JavaScript\r\n\r\nJavaScript是一种广泛用于前端开发的脚本语言，同时也可以在后端进行网络编程。Node.js是一个基于Chrome V8引擎的JavaScript运行时环境，提供了丰富的网络编程API，如http、https、net等模块，可以方便地构建服务器和处理网络请求。\r\n\r\n```javascript\r\nconst http = require(\'http\');\r\n\r\n//创建HTTP服务器\r\nconst server = http.createServer((req, res) => {\r\n  res.statusCode = 200;\r\n  res.setHeader(\'Content-Type\', \'text/plain\');\r\n  res.end(\'Hello, World!\\n\');\r\n});\r\n\r\n//启动服务器\r\nserver.listen(3000, \'127.0.0.1\', () => {\r\n  console.log(\'Server running at http://127.0.0.1:3000/\');\r\n});\r\n```\r\n\r\n## C/C++\r\n\r\nC和C++是传统的系统编程语言，也被广泛应用于网络编程。通过使用socket API和相关库，可以实现底层的网络通信。C和C++在网络协议栈的开发、嵌入式设备等方面有着广泛的应用。\r\n\r\n```c\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <sys/types.h>\r\n#include <sys/socket.h>\r\n#include <netinet/in.h>\r\n#include <arpa/inet.h>\r\n\r\nint main() {\r\n    //创建Socket连接\r\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\r\n\r\n    //设置服务器地址\r\n    struct sockaddr_in server_addr;\r\n    memset(&server_addr, 0, sizeof(server_addr));\r\n    server_addr.sin_family = AF_INET;\r\n    server_addr.sin_port = htons(80);\r\n    server_addr.sin_addr.s_addr = inet_addr(\"192.168.0.1\");\r\n\r\n    //连接服务器\r\n    connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr));\r\n\r\n    //发送HTTP请求\r\n    char request[] = \"GET / HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n\";\r\n    send(sockfd(request, strlen(request), 0);\r\n\r\n    //接收响应\r\n    char response[1024];\r\n    int n;\r\n    while ((n = recv(sockfd, response, sizeof(response) - 1, 0)) > 0) {\r\n        response[n] = \'\\0\';\r\n        printf(\"%s\", response);\r\n    }\r\n\r\n    //关闭连接\r\n    close(sockfd);\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n以上介绍了几种常用的网络编程语言，它们都能够实现网络通信和处理网络请求。具体选择使用哪种语言取决于开发需求、项目要求和个人偏好。', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 14:56:31', '2024-07-08 14:56:31', 1);
INSERT INTO `blog` VALUES (119, '7b0fff53d68943608e605904177740d6', '网络安全', '# 网络安全简介\r\n\r\n网络安全是保护计算机系统和数据不受未经授权的访问、破坏或更改的过程。在现代社会中，网络安全变得越来越重要，因为大量的个人和商业活动都依赖于互联网和计算机网络。\r\n\r\n## 常见的网络安全威胁\r\n\r\n### 1. 计算机病毒和恶意软件\r\n\r\n计算机病毒和恶意软件是最常见的网络安全威胁之一。它们可以通过电子邮件附件、下载文件、感染的网站等途径传播，并且可能对计算机系统和数据造成损害。\r\n\r\n### 2. 网络钓鱼（Phishing）\r\n\r\n网络钓鱼是一种欺骗性的行为，通常通过伪装成合法的组织或个人来获取用户的敏感信息，如用户名、密码、信用卡号等。网络钓鱼攻击往往以虚假的电子邮件或网站形式出现。\r\n\r\n### 3. 数据泄露\r\n\r\n数据泄露指未经授权地将敏感信息暴露给未授权的个人、组织或公众。这可能导致个人隐私泄露、财务损失以及声誉受损。\r\n\r\n### 4. DDoS攻击\r\n\r\n分布式拒绝服务（DDoS）攻击旨在通过超过目标系统处理能力的大量请求来使其无法正常工作。这种攻击通常涉及一组被感染的计算机（称为僵尸网络）同时向目标发起请求。\r\n\r\n## 网络安全防护措施\r\n\r\n### 1. 防火墙\r\n\r\n防火墙是一种网络安全设备，可监视和控制进出网络的流量。它可以根据预定规则过滤和阻止潜在的恶意流量，从而保护网络免受攻击。\r\n\r\n### 2. 加密\r\n\r\n加密是一种将数据转换为不可读形式的技术，以防止未经授权的访问。通过使用加密技术，可以确保敏感信息在传输过程中不会被窃取或篡改。\r\n\r\n### 3. 多因素身份验证\r\n\r\n多因素身份验证要求用户提供多个验证要素（如密码、指纹、手机验证码等）才能获得访问权限。这种方法比单一的用户名和密码更安全，因为即使一个验证要素被泄露，攻击者也无法获得完整的访问权限。\r\n\r\n### 4. 定期更新和备份\r\n\r\n定期更新操作系统、应用程序和安全补丁可以修复已知漏洞，从而减少系统受到攻击的风险。此外，定期备份数据可以确保在发生攻击或数据丢失时能够恢复重要信息。\r\n\r\n## 结论\r\n\r\n网络安全对于保护计算机系统和数据的完整性、可用性和保密性至关重要。只有采取适当的安全措施，才能有效地应对各种网络安全威胁。通过加强安全意识和实施合适的防护措施，我们可以共同建立一个更安全的网络环境。\r\n\r\n希望本文可以为您提供一个简单的网络安全介绍，并引起您对网络安全的重', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 14:57:55', '2024-07-08 14:57:55', 1);
INSERT INTO `blog` VALUES (120, '999f5f7a76444c1e9ddfb3df90ff73dc', 'Python', '# Python语言简介\r\n\r\nPython是一种高级、通用、解释型的编程语言，由Guido van Rossum于1991年创造。它具有简洁明了的语法和强大的功能，广泛应用于各个领域，包括Web开发、数据科学、人工智能等。下面将介绍Python的特点和用途。\r\n\r\n## 特点\r\n\r\n- **简单易学**：Python采用清晰简单的语法，使得初学者能够快速上手并理解代码。\r\n- **可读性强**：Python注重代码的可读性，采用缩进来表示代码块，使得代码结构清晰明了。\r\n- **广泛的库和生态系统**：Python拥有丰富的第三方库和模块，可以满足各种开发需求，并且有庞大的开源社区支持。\r\n- **跨平台性**：Python可以在多个操作系统上运行，包括Windows、MacOS和Linux等。\r\n- **动态类型**：Python是一种动态类型语言，不需要事先声明变量的类型，提供了更灵活的开发体验。\r\n\r\n## 用途\r\n\r\n- **Web开发**：Python提供了众多的Web框架（如Django、Flask）和库，用于构建高效、安全的Web应用程序。\r\n- **数据科学**：Python在数据处理、分析和可视化方面有着强大的能力，常用的数据科学库包括NumPy、Pandas和Matplotlib等。\r\n- **人工智能**：Python在机器学习、深度学习和自然语言处理等领域应用广泛，常用的库包括TensorFlow、PyTorch和Scikit-learn等。\r\n- **自动化和脚本编程**：Python可以用于编写各种类型的脚本和自动化任务，简化重复性工作并提高效率。\r\n- **网络编程**：Python提供了丰富的网络编程库（如socket、requests），使得开发者可以轻松构建网络应用和处理网络请求。\r\n\r\n## 示例代码\r\n\r\n以下是一个简单的Python示例代码，用于计算斐波那契数列：\r\n\r\n```python\r\ndef fibonacci(n):\r\n    if n <= 0:\r\n        return []\r\n    elif n == 1:\r\n        return [0]\r\n    elif n == 2:\r\n        return [0, 1]\r\n    else:\r\n        fib_list = [0, 1]\r\n        while len(fib_list) < n:\r\n            next_num = fib_list[-1] + fib_list[-2]\r\n            fib_list.append(next_num)\r\n        return fib_list\r\n\r\n# 输出前10个斐波那契数\r\nfib_sequence = fibonacci(10)\r\nprint(fib_sequence)\r\n```\r\n\r\n以上是对Python语言的简要介绍。Python以其简洁、易读的语法和强大的功能而备受开发者青睐，适用于多种应用场景。无论是初学者还是专业开发者，使用Python都能够快速有效地实现各种编程任务。', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 14:58:55', '2024-07-08 14:58:55', 1);
INSERT INTO `blog` VALUES (121, '858926ea29894d1197b3409cc4818d12', '编译原理', '# 编译原理简介\r\n\r\n编译原理是计算机科学中的一门重要学科，研究如何将高级程序语言转化为可执行代码的过程。下面将介绍编译原理的基本概念和主要步骤。\r\n\r\n## 概念\r\n\r\n- **编译器**：编译器是将高级程序语言转化为低级可执行代码的工具。它包括词法分析、语法分析、语义分析、优化和代码生成等多个阶段。\r\n\r\n- **源代码**：源代码是用高级程序语言编写的程序文本，它需要通过编译器进行处理才能运行。\r\n\r\n- **目标代码**：目标代码是由编译器生成的中间表示形式或者直接可执行的机器代码。\r\n\r\n- **解释器**：解释器是逐行解释源代码并执行的工具，它不将源代码转化为目标代码，而是动态执行源代码。\r\n\r\n## 主要步骤\r\n\r\n编译原理包括以下主要步骤：\r\n\r\n1. **词法分析（Lexical Analysis）**：词法分析器将源代码划分为一个个词素（Token），例如变量名、关键字、运算符等。词法分析器通常使用正则表达式和有限自动机来实现。\r\n\r\n2. **语法分析（Syntax Analysis）**：语法分析器根据语法规则，将词素序列转化为抽象语法树（Abstract Syntax Tree，AST），用于表示源代码的结构和语义。常用的语法分析方法有递归下降法和LR分析法。\r\n\r\n3. **语义分析（Semantic Analysis）**：语义分析器对AST进行进一步处理，检查变量声明、类型匹配等语义错误，并生成符号表以支持后续的优化和代码生成阶段。\r\n\r\n4. **优化（Optimization）**：优化器对中间表示形式进行各种优化，以提高程序的执行效率和资源利用率。优化包括常量折叠、循环展开、死代码消除等技术。\r\n\r\n5. **代码生成（Code Generation）**：代码生成器将优化后的中间表示形式转化为目标机器代码或者虚拟机字节码。不同的目标平台可能需要使用不同的代码生成策略。\r\n\r\n6. **目标代码优化（Target Code Optimization）**：对生成的目标代码进行优化，以提高程序的运行效率和资源利用率。目标代码优化包括寄存器分配、指令调度等技术。\r\n\r\n## 示例\r\n\r\n以下是一个简单示例的源代码，将通过编译器的处理生成可执行代码：\r\n\r\n```c\r\n#include <stdio.h>\r\n\r\nint main() {\r\n    int a = 10;\r\n    int b = 20;\r\n    int sum = a + b;\r\n    printf(\"The sum is: %d\\n\", sum);\r\n    return 0;\r\n}\r\n```\r\n\r\n编译器将对上述源代码进行词法分析、语法分析、语义分析、优化和代码生成等步骤，生成可执行的机器代码。\r\n\r\n编译原理是计算机科学中的重要研究领域，理解编译原理的基本概念和主要步骤有助于我们更深入地理解编程语言和程序执行的过程。掌握编译原理相关知识可以帮助开发者更好地理解和优化自己的代码。', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 14:59:47', '2024-07-08 14:59:47', 1);
INSERT INTO `blog` VALUES (122, 'b5f16fca21004f48a16cda57881e57a1', 'C++', '\r\n\r\n# C++ 编程语言简介\r\n\r\nC++ 是一种通用编程语言，广泛应用于软件开发领域。它是对 C 语言的扩展，引入了面向对象编程（OOP）和其他一些高级特性，使得代码更加模块化、可重用和易于理解。\r\n\r\n## 基本语法和特性\r\n\r\n### 变量和数据类型\r\n\r\n在 C++ 中，您可以声明各种类型的变量，如整数、浮点数、字符、布尔值等。可以使用关键字 `int`、`float`、`char`、`bool` 等来声明变量，并通过赋值操作符将值赋给变量。\r\n\r\n```cpp\r\nint age = 20;\r\nfloat pi = 3.14;\r\nchar grade = \'A\';\r\nbool isPassed = true;\r\n```\r\n\r\n### 控制流语句\r\n\r\nC++ 提供了多种控制流语句，如条件语句 `if-else`、循环语句 `for`、`while`、`do-while`、以及跳转语句 `break`、`continue` 等。这些语句可以帮助您根据不同的条件执行不同的代码块。\r\n\r\n```cpp\r\nif (age >= 18) {\r\n    cout << \"You are an adult.\" << endl;\r\n} else {\r\n    cout << \"You are a minor.\" << endl;\r\n}\r\n\r\nfor (int i = 1; i <= 10; i++) {\r\n    cout << i << \" \";\r\n}\r\n\r\nwhile (isRunning) {\r\n    // 执行一些操作\r\n}\r\n```\r\n\r\n### 函数和类\r\n\r\nC++ 支持函数和类的定义，使得代码更加模块化和可重用。您可以使用关键字 `void`、`class` 来声明函数和类。\r\n\r\n```cpp\r\n// 函数定义\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\n// 类定义\r\nclass Circle {\r\nprivate:\r\n    double radius;\r\n\r\npublic:\r\n    Circle(double r) {\r\n        radius = r;\r\n    }\r\n\r\n    double getArea() {\r\n        return 3.14 * radius * radius;\r\n    }\r\n};\r\n```\r\n\r\n## C++ 应用领域\r\n\r\n由于其灵活性和高性能，C++ 在多个领域都有广泛应用，例如：\r\n\r\n- 游戏开发：许多游戏引擎和游戏框架使用 C++ 进行开发，以实现高性能图形渲染和复杂的游戏逻辑。\r\n- 嵌入式系统：C++ 可用于开发嵌入式设备上的底层驱动程序和控制软件，因为它具有直接访问硬件的能力。\r\n- 高频交易系统：由于 C++ 具有快速执行和低延迟的特性，它常被用于开发金融领域的高频交易系统。\r\n- 操作系统开发：许多操作系统的内核是用 C++ 编写的，因为它提供了对底层硬件的控制和高级抽象的能力。\r\n\r\n## 总结\r\n\r\nC++ 是一种强大、灵活且广泛应用的编程语言。它提供了丰富的语法和特性，使得开发者可以构建复杂的程序和系统。无论是游戏开发、嵌入式系统还是金融领域，C++ 都在各个领域发挥着重要作用。\r\n\r\n希望本文可以为您提供一个简单的 C++ 介绍，并激发您对 C++ 编程的兴趣！', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.png', 1, '技术', '2024-07-08 15:00:11', '2024-07-08 15:00:11', 1);
INSERT INTO `blog` VALUES (123, '3155bf249a3347ed882b9931339eeed2', 'SPRINGBOOT', '# Spring Boot简介\r\n\r\nSpring Boot是一个用于快速构建应用程序的开源框架。它基于Java语言和Spring框架，旨在简化开发流程并提高生产力。下面将介绍Spring Boot的特点、优势以及常见的使用场景。\r\n\r\n## 特点\r\n\r\n- **简化配置**：Spring Boot采用约定优于配置的原则，自动配置大部分常见的配置项，减少了繁琐的XML或注解配置。\r\n- **内嵌容器**：Spring Boot内置了多个常见的Web容器（如Tomcat、Jetty），可以直接作为独立的应用程序运行，无需额外安装和配置其他服务器。\r\n- **自动化依赖管理**：Spring Boot通过依赖管理工具（如Maven、Gradle）自动管理项目所需的依赖库，简化了依赖管理的过程。\r\n- **生产就绪**：Spring Boot提供了一系列功能和工具，例如健康检查、性能监控、安全认证等，使得应用程序更易于部署和管理。\r\n\r\n## 优势\r\n\r\n- **快速启动**：Spring Boot提供了一个起步依赖（Starter）的概念，它包含了常用的依赖库和配置，可以快速搭建一个可运行的应用程序。\r\n- **开箱即用**：Spring Boot提供了丰富的功能模块和插件，包括Web开发、数据库访问、缓存、消息队列等，开发者可以直接使用这些模块来构建应用程序。\r\n- **灵活可扩展**：Spring Boot兼容Spring框架的所有扩展点，可以自由选择使用Spring的各种组件和功能，满足不同项目的需求。\r\n- **易于测试**：Spring Boot支持单元测试和集成测试，并提供了各种测试工具，使得开发者可以方便地编写和执行测试用例。\r\n\r\n## 使用场景\r\n\r\nSpring Boot适用于各种类型的应用开发和部署场景，包括但不限于以下几个方面：\r\n\r\n- **Web开发**：Spring Boot通过Spring MVC提供了强大的Web开发能力，可以构建RESTful API、前后端分离的应用程序等。\r\n- **微服务架构**：Spring Boot与Spring Cloud框架的结合，可以实现微服务架构下的服务注册与发现、负载均衡、断路器等功能。\r\n- **数据处理**：Spring Boot与Spring Data框架集成，提供了简单而强大的数据库访问解决方案，支持关系型数据库和非关系型数据库。\r\n- **批处理**：Spring Boot提供了一套强大的批处理框架（Spring Batch），用于处理大批量数据的定时任务和批处理作业。\r\n- **消息队列**：Spring Boot与Spring Integration集成，可以轻松实现异步消息传递和事件驱动的开发模式。\r\n\r\n## 示例\r\n\r\n以下是一个简单的Spring Boot示例，用于创建一个Hello World的RESTful API：\r\n\r\n```java\r\n@RestController\r\npublic class HelloController {\r\n\r\n    @GetMapping(\"/hello\")\r\n    public String hello() {\r\n        return \"Hello, World!\";\r\n    }\r\n}\r\n\r\n@SpringBootApplication\r\npublic class Application {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\n```\r\n\r\n上述示例使用了Spring Boot的注解和约定，通过简单的代码即可创建一个可运行的Web应用程序，访问`/hello`路径将返回\"Hello, World!\"。\r\n\r\nSpring Boot以其简化配置、快速启动和丰富的功能模块而备受开发者青睐，被广泛应用于各种应用开发场景。无论是传统的单体应用还是现代化的微服务架构，Spring Boot都能够提供高效、灵活和可扩展的解决方案。', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.png', 1, '技术', '2024-07-08 15:03:39', '2024-07-08 15:03:39', 1);
INSERT INTO `blog` VALUES (124, '1806f1ce128646c8ba924e555899f02a', 'Linux', '# Linux操作系统简介\r\n\r\nLinux是一种开源的、免费的操作系统，它基于Unix操作系统的设计理念和原则，并由全球范围内的开发者共同参与开发和维护。Linux以其稳定性、安全性和灵活性而备受欢迎，被广泛用于服务器、嵌入式设备和个人电脑等各种场景。下面将介绍Linux的特点、优势以及常见的使用场景。\r\n\r\n## 特点\r\n\r\n- **开源自由**：Linux遵循开源许可协议，任何人都可以查看、修改和分发其源代码，没有版权限制，用户可以根据自己的需要进行修改和定制。\r\n- **多用户多任务**：Linux支持多用户同时登录，并能够同时运行多个应用程序，提供了强大的多任务处理能力。\r\n- **稳定可靠**：Linux具有出色的稳定性和可靠性，在长时间运行和高负载环境下仍能保持良好的性能。\r\n- **安全性**：Linux提供了多层次的安全机制，如用户权限管理、防火墙和加密文件系统等，保护系统和数据的安全性。\r\n- **灵活可定制**：Linux允许用户根据自己的需求进行定制和配置，可以选择不同的桌面环境、软件包和工具等，满足个性化的需求。\r\n- **强大的命令行工具**：Linux提供了丰富的命令行工具集，使得用户可以通过命令行进行系统管理和配置，提高工作效率。\r\n\r\n## 优势\r\n\r\n- **兼容性强**：Linux能够运行在各种不同的硬件平台上，如x86、ARM等，具有良好的跨平台兼容性。\r\n- **开发者友好**：Linux提供了广泛的开发工具和编程环境，支持多种编程语言和开发框架，为开发者提供便利和灵活性。\r\n- **服务器领域强大**：Linux在服务器领域占据主导地位，被广泛用于搭建Web服务器、数据库服务器、云计算平台等。\r\n- **维护和更新方便**：Linux拥有庞大的开源社区和活跃的维护团队，及时进行修复漏洞和发布新功能，用户能够轻松获取最新的更新和补丁。\r\n- **低资源消耗**：Linux运行所需的系统资源相对较低，可以在资源有限的设备上高效运行，节约成本和能源。\r\n\r\n## 使用场景\r\n\r\nLinux适用于各种类型的应用开发和操作系统需求，包括但不限于以下几个方面：\r\n\r\n- **服务器运维**：Linux是服务器运维的首选操作系统，被广泛用于搭建和管理Web服务器、数据库服务器、文件服务器等。\r\n- **云计算平台**：Linux在云计算领域表现出色，被各大云服务提供商采用，并且支持Docker容器化技术。\r\n- **嵌入式设备**：Linux适用于嵌入式设备的开发，如智能手机、路由器、智能家居等，提供了灵活性和可定制性。\r\n- **科学计算**：Linux在科学计算领域被广泛应用，提供了丰富的数学库和工具，支持高性能计算和模拟仿真。\r\n- **开发者工具和环境**：Linux提供了广泛的开发工具和编程环境，如GCC编译器、Eclipse集成开发环境等，为开发者提供便利和灵活性。\r\n\r\n## 示例\r\n\r\n以下是一个简单的Linux命令示例，用于列出当前目录下的文件列表：\r\n\r\n```shell\r\nls\r\n```\r\n\r\n上述示例使用了Linux的命令行工具，通过简单的命令即可执行相应的操作。Linux以其稳定性、安全性和灵活性而备受开发者青睐，被广泛应用于各种应用程序和操作系统场景。无论是服务器运维、嵌入式设备还是科学计算，Linux都能够提供强大的操作系统支持和工具。\r\n', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 15:04:07', '2024-07-08 15:04:07', 1);
INSERT INTO `blog` VALUES (125, '8bfe1c85758041e6beabd50d759cc5ad', 'Vue', '# Vue.js 简介\r\n\r\nVue.js 是一款用于构建用户界面的渐进式 JavaScript 框架。与其它庞大的框架不同，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，使其易于学习和集成到现有项目中。\r\n\r\n## Vue 的主要特点\r\n\r\n- **响应式数据绑定**：Vue 通过简单的语法实现了数据与 DOM 的双向绑定，当数据变化时，视图会自动更新。  \r\n- **组件化**：Vue 提供了组件化的开发方式，可以将页面拆分成多个独立的、可重用的组件，从而提高代码的复用性和可维护性。  \r\n- **易于集成**：Vue 可以轻松地与其他库或项目集成，如 Vuex（状态管理库）、Vue Router（官方路由库）等。  \r\n- **虚拟 DOM**：Vue 使用了虚拟 DOM，这意味着所有的 DOM 更新都首先在虚拟 DOM 上进行，然后 Vue 计算出最少的步骤来实现真实 DOM 的更新，提高了性能。\r\n\r\n## Vue 的工作原理\r\n\r\nVue 的核心是一个响应式系统，它将模板编译成虚拟 DOM，然后通过比较新旧虚拟 DOM 的差异，计算出需要更新的部分，最后再更新真实 DOM。Vue 还提供了一些内置的指令，如 `v-model`、`v-if`、`v-for` 等，用于实现数据绑定、条件渲染和列表渲染等功能。\r\n\r\n## Vue 的应用场景\r\n\r\nVue 非常适合用于构建以下类型的应用：\r\n\r\n- 单页面应用 (SPA)  \r\n- 移动应用 (MVVM 架构)  \r\n- 后台管理系统  \r\n- 数据可视化\r\n\r\n## 结论\r\n\r\nVue.js 是一款轻量、易用、高性能的 JavaScript 框架，适用于构建各种类型的应用。它的组件化、响应式数据绑定和虚拟 DOM 等特性使得开发者可以更轻松地构建复杂的用户界面。如果你正在寻找一款易于上手、功能丰富的框架，那么 Vue.js 绝对值得一试', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 15:09:32', '2024-07-08 15:09:32', 1);
INSERT INTO `blog` VALUES (126, 'adff006e510b4d1397d1b28055e42c9c', 'Html', '\r\n# HTML 简介\r\n\r\nHTML（Hypertextt Markup Language,文本标记语言）是一种用于创建网页的标准标记语言。它是一种基于 XML 的格式，用于描述网页结构，内容和样式。HTML 文档由一系列的元素组成，每个元素由开始标签、结束标签和中间的内容组成。\r\n\r\n## HTML 元素\r\n\r\nHTML 元素是 HTML 文档的基本构建块。每个元素由一个开始标签、一个结束标签和一个可选的内容区域组成。例如：\r\n\r\n```  \r\n<p>这是一个段落元素。</p>  \r\n```\r\n\r\n在这个例子中，`<p>`是开始标签，`</p>`是结束标签，中间的内容是“这是一个段落元素。”。\r\n\r\n### 标签属性\r\n\r\nHTML 元素可以具有属性，这些属性提供有关元素的附加信息。例如，`<a>`元素可以具有`href`属性，用于指定链接的目标 URL：\r\n\r\n```  \r\n<a href=\"https://www.example.com\">访问示例网站</a>  \r\n```\r\n\r\n在这个例子中，`href`属性包含链接的目标 URL。\r\n\r\n## HTML 文档结构\r\n\r\nHTML 文档由一系列的元素组成，这些元素组织成树形结构。文档的根元素是`<html>`元素，它包含`<head>`和`<body>`元素：\r\n\r\n```  \r\n<html>  \r\n  <head>  \r\n    <title>示例页面</title>  \r\n  </head>  \r\n  <body>  \r\n    <h1>欢迎来到示例页面</h1>  \r\n    <p>这是一个段落。</p>  \r\n  </body>  \r\n</html>  \r\n```\r\n\r\n在这个例子中，`<html>`元素是根元素，`<head>`和`<body>`元素是它的子元素。`<head>`元素包含页面的元数据，如标题和样式表。`<body>`元素包含页面的主要内容。\r\n\r\n## 总结\r\n\r\nHTML 是一种用于创建网页的标准标记语言。它由一系列的元素组成，每个元素由开始标签、结束标签和中间的内容组成。HTML 文档的结构由`<html>`、`<head>`和`<body>`元素组成。了解 HTML 的基本概念和结构是学习网页开发的第一步。  \r\n', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 15:10:21', '2024-07-08 15:10:21', 1);
INSERT INTO `blog` VALUES (127, 'ee8c776dd792442a9cc3f0b69e4dd269', 'JavaWeb', '# JavaWeb简介\r\n\r\nJavaWeb是指使用Java技术开发Web应用程序的方式。JavaWeb应用程序可以运行在Web服务器上，向用户提供动态Web页面、Web服务和Web应用程序。\r\n\r\nJavaWeb应用程序通常由三部分组成：客户端、Web服务器和应用服务器。客户端是指用户使用的浏览器，向Web服务器发送请求。Web服务器接收请求并将其转发给应用服务器。应用服务器处理请求并生成响应，再返回给Web服务器，最终由Web服务器将响应发送给客户端。\r\n\r\n# JavaWeb开发技术\r\n\r\nJavaWeb开发技术包括：\r\n\r\n## Servlet\r\n\r\nServlet是JavaWeb中最基础的技术之一，它是一个Java类，可以接收来自Web服务器的请求，并生成响应。Servlet通常用于处理表单提交、用户登录、数据查询等操作。\r\n\r\n## JSP\r\n\r\nJSP（JavaServer Pages）是一种动态Web页面技术，它允许在HTML页面中嵌入Java代码。JSP页面在运行时会被编译成Servlet，并由Web服务器执行。\r\n\r\n## JDBC\r\n\r\nJDBC（Java Database Connectivity）是Java访问数据库的标准API。通过JDBC，JavaWeb应用程序可以连接任何支持JDBC的数据库，并执行SQL语句。\r\n\r\n## Spring\r\n\r\nSpring是一个开源的Java框架，它提供了一系列的工具和组件，用于简化JavaWeb应用程序的开发。Spring包括Spring MVC、Spring Boot、Spring Security等子框架，可以满足不同场景下的需求。\r\n\r\n## Hibernate\r\n\r\nHibernate是一个Java持久化框架，它提供了一种对象关系映射（ORM）的方式，将Java对象映射到关系数据库中。Hibernate可以自动生成SQL语句，从而简化了数据库操作。\r\n\r\n# JavaWeb开发工具\r\n\r\nJavaWeb开发工具包括：\r\n\r\n## Eclipse\r\n\r\nEclipse是一个开源的Java开发工具，它提供了丰富的插件和工具，用于JavaWeb应用程序的开发、测试和部署。\r\n\r\n## IntelliJ IDEA\r\n\r\nIntelliJ IDEA是一个商业的Java开发工具，它提供了智能代码提示、调试、测试等功能，可以大大提高JavaWeb应用程序的开发效率。\r\n\r\n## NetBeans\r\n\r\nNetBeans是一个开源的Java开发工具，它提供了JavaWeb应用程序的开发、测试和部署功能，同时还支持多种编程语言。\r\n\r\n# 总结\r\n\r\nJavaWeb是一种使用Java技术开发Web应用程序的方式，它包括Servlet、JSP、JDBC、Spring、Hibernate等技术。JavaWeb开发工具包括Eclipse、IntelliJ IDEA、NetBeans等。JavaWeb技术的应用范围非常广泛，可以用于开发企业级应用程序、电子商务网站、社交网络等。', 0, 1, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 3, '前端', '2024-07-08 15:12:42', '2024-07-08 15:12:42', 1);
INSERT INTO `blog` VALUES (128, '8e9ce004fc5b4f89a701b51c79913709', 'Websocket', '# WebSocket简介\r\n\r\nWebSocket是一种基于TCP的协议，用于实现服务器与客户端之间的双向通信。相比传统的HTTP请求-响应模式，WebSocket允许服务器主动向客户端推送数据，以实时更新页面内容或进行实时通信。本文将介绍WebSocket的特点、工作原理以及使用场景。\r\n\r\n## 特点\r\n\r\n1. 双向通信：WebSocket提供了全双工的通信方式，使得服务器和客户端可以同时发送和接收数据。这使得实时通信和实时更新变得更加简单和高效。\r\n\r\n2. 长连接：WebSocket通过建立一次连接，可以持久保持与服务器的连接状态，而不需要每次请求都重新建立连接。这减少了服务器和客户端之间的握手开销，提高了通信效率。\r\n\r\n3. 低延迟：由于WebSocket采用长连接方式，并且没有冗余的HTTP头部信息，所以可以降低网络传输的延迟，实现毫秒级的实时通信。\r\n\r\n4. 跨域支持：WebSocket支持跨域通信，在客户端与服务器位于不同域名下时，仍然能够正常建立连接和通信。\r\n\r\n5. 协议独立：WebSocket是一个独立的协议，不依赖于HTTP。尽管它的握手阶段使用了HTTP协议进行协商，但之后的通信过程使用自己的协议。\r\n\r\n## 工作原理\r\n\r\n1. 握手阶段：客户端向服务器发送一个HTTP请求，包含特定的头部信息。服务器收到请求后，生成一个唯一的标识符作为连接的握手口令，并返回给客户端。\r\n\r\n2. 建立连接：客户端接收到服务器返回的握手口令后，会再次向服务器发送一个HTTP请求，将握手口令放入请求的头部。服务器验证握手口令并建立连接。\r\n\r\n3. 数据传输：一旦连接建立成功，客户端和服务器都可以通过发送消息来实现双向通信。客户端和服务器可以随时发送消息，并且对方也能即时收到消息并作出响应。\r\n\r\n4. 断开连接：当某一方不再需要保持连接时，可以主动关闭连接。也可以在网络异常等情况下由系统自动断开连接。\r\n\r\n## 使用场景\r\n\r\n1. 实时聊天：WebSocket提供了实时通信的能力，非常适合用于实现实时聊天功能，如在线客服、即时通讯等。\r\n\r\n2. 实时数据更新：对于需要实时更新页面内容的应用，如股票行情、在线游戏等，WebSocket能够快速地将数据推送给客户端，使得页面内容能够及时更新。\r\n\r\n3. 协同编辑：多人协同编辑的应用，如Google Docs、实时白板等，需要服务器能够将一方的操作及时同步给其他参与者，WebSocket能够实现这种实时同步。\r\n\r\n4. 实时推送：对于需要向用户发送实时通知或提醒的应用，如新闻推送、即时交易提醒等，WebSocket能够快速地将消息推送给客户端。\r\n\r\n总结\r\n\r\nWebSocket是一种基于TCP的协议，用于实现服务器与客户端之间的双向通信。它具有双向通信、长连接、低延迟、跨域支持和协议独立等特点，适用于实时通信、实时数据更新、协同编辑和实时推送等场景。通过使用WebSocket，开发者能够更轻松地构建实时性强、', 0, 0, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 1, '技术', '2024-07-08 15:13:15', '2024-07-08 15:13:15', 1);
INSERT INTO `blog` VALUES (129, '55deff1b045a4a67a84d7da471e64c8f', 'SpringCloud', '# Spring Cloud简介\r\n\r\nSpring Cloud是一个开源的微服务框架，它为基于Java的应用程序提供了一套丰富的工具和库，用于构建、部署和管理分布式系统。它基于Spring框架，提供了解决微服务架构中常见问题的解决方案，如服务发现、负载均衡、配置管理、断路器等。\r\n\r\n## Spring Cloud的核心组件\r\n\r\n### 1. 服务注册与发现（Service Registration and Discovery）\r\n服务注册与发现是微服务架构中的关键组件之一。Spring Cloud通过集成Eureka、Consul等服务注册与发现工具，实现了服务的自动注册和发现。在一个分布式的环境中，服务可以动态地注册和注销，并可以根据需要找到其他服务的位置。\r\n\r\n### 2. 网关（Gateway）\r\n网关是微服务架构中的入口点，Spring Cloud通过集成Zuul或者Spring Cloud Gateway，提供了统一的API网关服务。网关可以实现请求的路由、负载均衡、安全认证和流量控制等功能，将外部请求转发给后端的微服务。\r\n\r\n### 3. 配置管理（Configuration Management）\r\n分布式系统中的配置管理是一项挑战性的任务。Spring Cloud通过集成Spring Cloud Config，实现了配置文件的集中管理和动态更新。开发人员可以使用Git、SVN等版本控制系统，管理不同环境下的配置文件，并可以通过HTTP或者消息总线实现配置的动态更新。\r\n\r\n### 4. 断路器（Circuit Breaker）\r\n在分布式系统中，服务之间的调用可能会因为网络延迟、故障或者资源限制等原因而失败。Spring Cloud通过集成Hystrix，提供了断路器模式的支持。断路器可以监控服务调用的状态，并在出现故障时快速切换到备用方案，保证系统的可用性和稳定性。\r\n\r\n### 5. 分布式跟踪（Distributed Tracing）\r\n微服务架构中的请求往往需要经过多个服务的处理，这给排查问题带来了困难。Spring Cloud通过集成Sleuth和Zipkin，提供了分布式跟踪功能。通过生成唯一的跟踪ID，并记录请求的路由和调用链信息，开发人员可以方便地追踪和分析请求的流转路径。\r\n\r\n## 总结\r\n\r\nSpring Cloud是一个强大而灵活的微服务框架，它提供了丰富的工具和库，帮助开发人员构建、部署和管理分布式系统。通过集成各种核心组件，Spring Cloud解决了微服务架构中的常见问题，使得开发人员可以更加专注于业务逻辑的开发。如果你正在构建一个分布式系统，不妨考虑使用Spring Cloud来简化开发和维护工作。', 0, 2, 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.jpg', 4, '后端', '2024-07-08 15:13:46', '2024-07-08 15:13:46', 1);
INSERT INTO `blog` VALUES (130, '03ce436c3d21487eb3197df09cbd78ff', '你好我是新来的', '# 你好\r\n请问这个系统好用吗', 0, 0, 'c46bc31b700e4848940216f7081ab776', 'dingz', '/images/avatar/man.jpg', 2, '提问', '2024-07-08 16:26:55', '2024-07-08 16:26:55', 1);

-- ----------------------------
-- Table structure for blog_category
-- ----------------------------
DROP TABLE IF EXISTS `blog_category`;
CREATE TABLE `blog_category`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `category` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '博客分类',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of blog_category
-- ----------------------------
INSERT INTO `blog_category` VALUES (1, '技术');
INSERT INTO `blog_category` VALUES (2, '提问');
INSERT INTO `blog_category` VALUES (3, '前端');
INSERT INTO `blog_category` VALUES (4, '后端');

-- ----------------------------
-- Table structure for chattab
-- ----------------------------
DROP TABLE IF EXISTS `chattab`;
CREATE TABLE `chattab`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `uid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `ouid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 27 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of chattab
-- ----------------------------
INSERT INTO `chattab` VALUES (21, '506a99761b1346c7b9c324121af54e3h', '506a99761b1346c7b9c324121af54e3a');
INSERT INTO `chattab` VALUES (22, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a');
INSERT INTO `chattab` VALUES (23, '8656a22c8c3a415e9f4c5c6f6f804eaf', '506a99761b1346c7b9c324121af54e3a');
INSERT INTO `chattab` VALUES (24, '8656a22c8c3a415e9f4c5c6f6f804eaf', 'a088bd3baef8479e854f3c4c197017d1');
INSERT INTO `chattab` VALUES (25, 'c46bc31b700e4848940216f7081ab776', '506a99761b1346c7b9c324121af54e3a');
INSERT INTO `chattab` VALUES (26, '506a99761b1346c7b9c324121af54e3a', '443384c4a80f487cae24782b5f8c3f67');

-- ----------------------------
-- Table structure for collect
-- ----------------------------
DROP TABLE IF EXISTS `collect`;
CREATE TABLE `collect`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `uid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户id',
  `article_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '作者id',
  `bid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '文章id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 17 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of collect
-- ----------------------------
INSERT INTO `collect` VALUES (12, 'a088bd3baef8479e854f3c4c197017d1', 'a088bd3baef8479e854f3c4c197017d1', 'f8849e78c31d4afd902bab33ad338426');
INSERT INTO `collect` VALUES (16, '443384c4a80f487cae24782b5f8c3f67', 'a088bd3baef8479e854f3c4c197017d1', 'b1971eb9cb0040c0904c5694db7c9417');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '自增id',
  `comment_id` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论唯一id',
  `topic_id` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论文章id',
  `user_id` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论者id',
  `user_name` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论者昵称',
  `user_avatar` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论者头像',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论内容',
  `create_time` datetime NOT NULL COMMENT '评论创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 153 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (143, '3e0498f41bcf41c098f97505c4143386', '29b3308783e54cf994b26801097d88af', '506a99761b1346c7b9c324121af54e3h', 'qwer', '/images/avatar/man.png', '怀念啊', '2024-07-08 17:05:10');
INSERT INTO `comment` VALUES (144, 'f22e538c08e94a6891fbe964235fa3ab', '236af638525b4b52a4561ebac02de3ae', '506a99761b1346c7b9c324121af54e3h', 'qwer', '/images/avatar/man.png', '评论在这', '2024-07-08 17:15:22');
INSERT INTO `comment` VALUES (145, '692d815c4f3e4c6c9cd0a00576091135', 'f921253fe4854f4c82de7a6f8df376d8', 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.png', '好厉害呀', '2024-07-08 14:14:56');
INSERT INTO `comment` VALUES (146, 'e1ca21ea0aff4689bf671d1b937d2ffb', 'f8849e78c31d4afd902bab33ad338426', 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.png', '值得学习\n', '2024-07-08 07:39:07');
INSERT INTO `comment` VALUES (147, 'f2aeb055e09e4086b59188d34a5bcd39', '2472feb1f41e4497b5233a14d4d53fc9', 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.png', '插眼\n', '2024-07-08 16:25:45');
INSERT INTO `comment` VALUES (148, 'ae8802438b974837972e7e61a2ed0a27', 'f921253fe4854f4c82de7a6f8df376d8', '506a99761b1346c7b9c324121af54e3a', 'wasd', '/images/avatar/man.png', '你好\n', '2024-07-08 07:49:55');
INSERT INTO `comment` VALUES (149, '2836fa8770a445c99f02796943b26377', '236af638525b4b52a4561ebac02de3ae', 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.png', '写的很好！\n', '2024-07-08 15:23:41');
INSERT INTO `comment` VALUES (150, '506a388bc6294803b2bfc8426895881f', '340250e836f34bb78a3f511eb539fcaf', 'a088bd3baef8479e854f3c4c197017d1', 'kkkdd', '/images/avatar/man.png', '太牛了哥们儿\n', '2024-07-08 15:24:50');
INSERT INTO `comment` VALUES (151, 'dae383c6ca944943b367042ff24f2221', '236af638525b4b52a4561ebac02de3ae', 'c46bc31b700e4848940216f7081ab776', 'dingz', '/images/avatar/man.png', '测试一个评论', '2024-07-08 16:25:42');
INSERT INTO `comment` VALUES (152, '60e1a910f7da4182b886003bf262a620', 'b1971eb9cb0040c0904c5694db7c9417', '443384c4a80f487cae24782b5f8c3f67', 'Ding', '/images/avatar/man.png', '这个很有帮助', '2024-07-08 10:33:36');

-- ----------------------------
-- Table structure for follow_fans
-- ----------------------------
DROP TABLE IF EXISTS `follow_fans`;
CREATE TABLE `follow_fans`  (
  `user_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户id',
  `follower_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '被关注者用户id',
  `relation_type` int NOT NULL COMMENT '关系  1关注  2粉丝'
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of follow_fans
-- ----------------------------
INSERT INTO `follow_fans` VALUES ('506a99761b1346c7b9c324121af54e3h', '506a99761b1346c7b9c324121af54e3a', 1);
INSERT INTO `follow_fans` VALUES ('506a99761b1346c7b9c324121af54e3a', '506a99761b1346c7b9c324121af54e3h', 2);
INSERT INTO `follow_fans` VALUES ('a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 1);
INSERT INTO `follow_fans` VALUES ('506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', 2);
INSERT INTO `follow_fans` VALUES ('8656a22c8c3a415e9f4c5c6f6f804eaf', '506a99761b1346c7b9c324121af54e3a', 1);
INSERT INTO `follow_fans` VALUES ('506a99761b1346c7b9c324121af54e3a', '8656a22c8c3a415e9f4c5c6f6f804eaf', 2);
INSERT INTO `follow_fans` VALUES ('8656a22c8c3a415e9f4c5c6f6f804eaf', 'a088bd3baef8479e854f3c4c197017d1', 1);
INSERT INTO `follow_fans` VALUES ('a088bd3baef8479e854f3c4c197017d1', '8656a22c8c3a415e9f4c5c6f6f804eaf', 2);
INSERT INTO `follow_fans` VALUES ('506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', 1);
INSERT INTO `follow_fans` VALUES ('a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 2);
INSERT INTO `follow_fans` VALUES ('c46bc31b700e4848940216f7081ab776', '506a99761b1346c7b9c324121af54e3a', 1);
INSERT INTO `follow_fans` VALUES ('506a99761b1346c7b9c324121af54e3a', 'c46bc31b700e4848940216f7081ab776', 2);
INSERT INTO `follow_fans` VALUES ('443384c4a80f487cae24782b5f8c3f67', 'a088bd3baef8479e854f3c4c197017d1', 1);
INSERT INTO `follow_fans` VALUES ('a088bd3baef8479e854f3c4c197017d1', '443384c4a80f487cae24782b5f8c3f67', 2);
INSERT INTO `follow_fans` VALUES ('506a99761b1346c7b9c324121af54e3a', '443384c4a80f487cae24782b5f8c3f67', 1);
INSERT INTO `follow_fans` VALUES ('443384c4a80f487cae24782b5f8c3f67', '506a99761b1346c7b9c324121af54e3a', 2);

-- ----------------------------
-- Table structure for msg_store
-- ----------------------------
DROP TABLE IF EXISTS `msg_store`;
CREATE TABLE `msg_store`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '消息id',
  `receiver_uid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '接收方uid',
  `sender_uid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '发送方uid',
  `msg_content` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '消息体',
  `msg_time` datetime NOT NULL COMMENT '消息时间',
  `msg_type` int NOT NULL COMMENT '消息类型  0文本消息  1图片  2视频  3文件',
  `msg_isread` int NOT NULL COMMENT '是否已读  1已读  0未读',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 273 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of msg_store
-- ----------------------------
INSERT INTO `msg_store` VALUES (222, '8656a22c8c3a415e9f4c5c6f6f804eaf', '506a99761b1346c7b9c324121af54e3a', '你好', '2024-07-08 14:27:44', 0, 0);
INSERT INTO `msg_store` VALUES (223, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '吃了吗', '2024-07-08 14:28:43', 0, 1);
INSERT INTO `msg_store` VALUES (224, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', '你好', '2024-07-08 14:29:08', 0, 1);
INSERT INTO `msg_store` VALUES (225, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '我是的', '2024-07-08 14:29:17', 0, 1);
INSERT INTO `msg_store` VALUES (226, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', '吃了吗', '2024-07-08 14:29:39', 0, 1);
INSERT INTO `msg_store` VALUES (227, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '是的是的', '2024-07-08 14:29:45', 0, 1);
INSERT INTO `msg_store` VALUES (228, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', '哈拉呀', '2024-07-08 14:29:57', 0, 1);
INSERT INTO `msg_store` VALUES (229, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '那必须的', '2024-07-08 14:30:08', 0, 1);
INSERT INTO `msg_store` VALUES (230, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '我是五七', '2024-07-08 15:40:13', 0, 1);
INSERT INTO `msg_store` VALUES (231, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '我是57', '2024-07-08 15:40:46', 0, 1);
INSERT INTO `msg_store` VALUES (232, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '啊', '2024-07-08 15:41:03', 0, 1);
INSERT INTO `msg_store` VALUES (233, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '怎么了', '2024-07-08 15:41:05', 0, 1);
INSERT INTO `msg_store` VALUES (234, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', '?', '2024-07-08 15:41:31', 0, 1);
INSERT INTO `msg_store` VALUES (235, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '你卡了吗', '2024-07-08 15:42:07', 0, 1);
INSERT INTO `msg_store` VALUES (236, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', '没有啊', '2024-07-08 15:42:18', 0, 1);
INSERT INTO `msg_store` VALUES (237, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '那为啥有null', '2024-07-08 15:42:26', 0, 1);
INSERT INTO `msg_store` VALUES (238, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', '不懂', '2024-07-08 15:42:30', 0, 1);
INSERT INTO `msg_store` VALUES (239, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '你好', '2024-07-08 07:13:50', 0, 1);
INSERT INTO `msg_store` VALUES (240, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', '你是谁', '2024-07-08 07:14:22', 0, 1);
INSERT INTO `msg_store` VALUES (241, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '洗澡了吗', '2024-07-08 07:14:36', 0, 1);
INSERT INTO `msg_store` VALUES (242, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '你好', '2024-07-08 07:16:53', 0, 1);
INSERT INTO `msg_store` VALUES (243, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', 'nihao', '2024-07-08 07:33:22', 0, 1);
INSERT INTO `msg_store` VALUES (244, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', 'nb', '2024-07-08 07:35:51', 0, 1);
INSERT INTO `msg_store` VALUES (245, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', '你好', '2024-07-08 07:36:30', 0, 1);
INSERT INTO `msg_store` VALUES (246, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'nihao', '2024-07-08 07:36:46', 0, 1);
INSERT INTO `msg_store` VALUES (247, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '你好', '2024-07-08 07:37:02', 0, 1);
INSERT INTO `msg_store` VALUES (248, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '你好', '2024-07-08 07:37:34', 0, 1);
INSERT INTO `msg_store` VALUES (249, '8656a22c8c3a415e9f4c5c6f6f804eaf', '506a99761b1346c7b9c324121af54e3a', '你好2', '2024-07-08 07:41:02', 0, 0);
INSERT INTO `msg_store` VALUES (250, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'dwwe', '2024-07-08 07:41:21', 0, 1);
INSERT INTO `msg_store` VALUES (251, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'cnm', '2024-07-08 07:42:06', 0, 1);
INSERT INTO `msg_store` VALUES (252, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'dddd', '2024-07-08 07:43:07', 0, 1);
INSERT INTO `msg_store` VALUES (253, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'dddd', '2024-07-08 07:46:10', 0, 1);
INSERT INTO `msg_store` VALUES (254, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'dddddd', '2024-07-08 07:46:13', 0, 1);
INSERT INTO `msg_store` VALUES (255, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'ddd', '2024-07-08 07:46:14', 0, 1);
INSERT INTO `msg_store` VALUES (256, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'dd', '2024-07-08 07:46:15', 0, 1);
INSERT INTO `msg_store` VALUES (257, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'dd', '2024-07-08 07:46:16', 0, 1);
INSERT INTO `msg_store` VALUES (258, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'cnm', '2024-07-08 07:46:58', 0, 1);
INSERT INTO `msg_store` VALUES (259, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'dd', '2024-07-08 07:47:57', 0, 1);
INSERT INTO `msg_store` VALUES (260, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'dd', '2024-07-08 07:48:15', 0, 1);
INSERT INTO `msg_store` VALUES (261, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '丁丁、、', '2024-07-08 07:51:16', 0, 1);
INSERT INTO `msg_store` VALUES (262, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', 'nb', '2024-07-08 07:51:41', 0, 1);
INSERT INTO `msg_store` VALUES (263, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', 'nb', '2024-07-08 07:51:47', 0, 1);
INSERT INTO `msg_store` VALUES (264, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', '你好你在吗', '2024-07-08 15:29:18', 0, 1);
INSERT INTO `msg_store` VALUES (265, 'a088bd3baef8479e854f3c4c197017d1', '506a99761b1346c7b9c324121af54e3a', '我在呢', '2024-07-08 15:29:24', 0, 1);
INSERT INTO `msg_store` VALUES (266, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', '干嘛干嘛', '2024-07-08 15:32:47', 0, 1);
INSERT INTO `msg_store` VALUES (267, '506a99761b1346c7b9c324121af54e3a', 'a088bd3baef8479e854f3c4c197017d1', '干嘛干嘛', '2024-07-08 15:32:51', 0, 1);
INSERT INTO `msg_store` VALUES (268, '506a99761b1346c7b9c324121af54e3a', 'c46bc31b700e4848940216f7081ab776', '你好', '2024-07-08 16:25:57', 0, 1);
INSERT INTO `msg_store` VALUES (269, '506a99761b1346c7b9c324121af54e3a', 'c46bc31b700e4848940216f7081ab776', '你在干嘛', '2024-07-08 16:29:37', 0, 1);
INSERT INTO `msg_store` VALUES (270, 'c46bc31b700e4848940216f7081ab776', '506a99761b1346c7b9c324121af54e3a', '我在管理', '2024-07-08 16:29:53', 0, 1);
INSERT INTO `msg_store` VALUES (271, '443384c4a80f487cae24782b5f8c3f67', '506a99761b1346c7b9c324121af54e3a', '你好啊', '2024-07-08 10:30:38', 0, 1);
INSERT INTO `msg_store` VALUES (272, '506a99761b1346c7b9c324121af54e3a', '443384c4a80f487cae24782b5f8c3f67', '你是管理员', '2024-07-08 10:30:56', 0, 1);

-- ----------------------------
-- Table structure for persistent_logins
-- ----------------------------
DROP TABLE IF EXISTS `persistent_logins`;
CREATE TABLE `persistent_logins`  (
  `username` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `series` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `token` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `last_used` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`series`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of persistent_logins
-- ----------------------------
INSERT INTO `persistent_logins` VALUES ('Ding', 'B2Vd2H/c19twD/Pj4Y78Nw==', 'W64rKNZrFaHih1VN8IRwWg==', '2024-07-08 10:26:51');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `uid` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `role_id` int NOT NULL,
  `username` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `login_time` datetime NOT NULL,
  `create_time` datetime NOT NULL,
  `avatar` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 50 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (42, '506a99761b1346c7b9c324121af54e3a', 1, 'wasd', '$2a$10$Sy.fsxZeaF6f.9wa5Mmege07TKfvuDtvVqZhk6rpYHYlMBz5E2zO2', '2024-07-08 23:48:54', '2023-07-05 16:54:28', '/images/avatar/man.jpg');
INSERT INTO `user` VALUES (43, '506a99761b1346c7b9c324121af54e3h', 2, 'qwer', '$2a$10$Sy.fsxZeaF6f.9wa5Mmege07TKfvuDtvVqZhk6rpYHYlMBz5E2zO2', '2024-07-08 01:01:25', '2023-07-06 01:01:31', '/images/avatar/man.jpg');
INSERT INTO `user` VALUES (44, 'a088bd3baef8479e854f3c4c197017d1', 2, 'kkkdd', '$2a$10$KiBJAJvMWJF/MZt7oZPS0.PI2D4YexGhFcoeikIjsLU/75Nd5UMcO', '2024-07-08 14:05:16', '2023-09-26 14:05:16', '/images/avatar/man.jpg');
INSERT INTO `user` VALUES (45, '8656a22c8c3a415e9f4c5c6f6f804eaf', 2, '57kb', '$2a$10$d18HSZBM2SYv6wv7lNcZP.ktr4nnbi5Dm8E8XywHW3An71J450nYO', '2024-07-08 15:24:43', '2023-09-27 15:24:43', '/images/avatar/man.jpg');
INSERT INTO `user` VALUES (46, 'c46bc31b700e4848940216f7081ab776', 2, 'dingz', '$2a$10$GK6C3/qeDU5FK6NErwzPgem/2ASfNhdZ/Lsvz.eBNKBg.rbd4lka.', '2024-07-08 16:24:52', '2023-10-12 16:24:52', '/images/avatar/man.jpg');
INSERT INTO `user` VALUES (47, '443384c4a80f487cae24782b5f8c3f67', 2, 'Ding', '$2a$10$OQ3ep18mP8MSAH7MY1Q6k.IDcE4ef61z0aaT1luEiJOTHB0GYJYT6', '2024-07-08 10:26:41', '2023-10-13 10:26:41', '/images/avatar/man.jpg');
INSERT INTO `user` VALUES (48, 'd9de817f2e4d4d72a40bf815771343d8', 2, 'bbbb', '$2a$10$TEO4oxCIX0mYiB2PFm4OGuGCAVF3.UuCmzr8vDUErS4rz8uIeL6/O', '2024-07-08 15:32:49', '2024-07-08 15:32:49', '/images/avatar/man.jpg');
INSERT INTO `user` VALUES (49, 'a05ee4ce49cc4c0088cb834f62b4955e', 2, 'aaaa', '$2a$10$NkORpTGPPcW9maLf.Tbw3eVC3CgM5Mqv.TelRiI5X.qeb8c/4svb2', '2024-07-09 15:20:05', '2024-07-09 15:20:05', '/images/avatar/man.jpg');

-- ----------------------------
-- Table structure for user_info
-- ----------------------------
DROP TABLE IF EXISTS `user_info`;
CREATE TABLE `user_info`  (
  `uid` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `sex` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `brief` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `work` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `phone` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `qq` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `wechat` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `addr` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of user_info
-- ----------------------------
INSERT INTO `user_info` VALUES ('506a99761b1346c7b9c324121af54e3a', '我是管理员', '男', '别看了哥们儿，我是管理员', '', '', 'casca', '', '18838980203@163.com', '');
INSERT INTO `user_info` VALUES ('506a99761b1346c7b9c324121af54e3h', 'l鹭洲', NULL, '111', NULL, NULL, NULL, NULL, '2289533269@qq.com', NULL);
INSERT INTO `user_info` VALUES ('a088bd3baef8479e854f3c4c197017d1', '我是张志鹏', '男', '111', '', '', '', '', '1376177890@qq.com', '');
INSERT INTO `user_info` VALUES ('8656a22c8c3a415e9f4c5c6f6f804eaf', '我是崖柏', '男', '111', '', '', '', '', '2028264030@qq.com', '');
INSERT INTO `user_info` VALUES ('c46bc31b700e4848940216f7081ab776', '新来的', '男', '你好，我是新来的', '', '1845', '123456789', '', '3076614636@qq.com', '');
INSERT INTO `user_info` VALUES ('443384c4a80f487cae24782b5f8c3f67', '测试人员', '男', '感觉还不错', '', '41', '12345678', '', '1702302550@qq.com', '');
INSERT INTO `user_info` VALUES ('d9de817f2e4d4d72a40bf815771343d8', '轻轻的草原', NULL, NULL, NULL, NULL, NULL, NULL, '2879330978@qq.com', NULL);
INSERT INTO `user_info` VALUES ('a05ee4ce49cc4c0088cb834f62b4955e', '轻轻的草原', NULL, NULL, NULL, NULL, NULL, NULL, '2879330978@qq.com', NULL);

-- ----------------------------
-- Table structure for user_role
-- ----------------------------
DROP TABLE IF EXISTS `user_role`;
CREATE TABLE `user_role`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `rolename` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '角色名称',
  `description` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '描述',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of user_role
-- ----------------------------
INSERT INTO `user_role` VALUES (1, 'admin', '管理员', NULL);
INSERT INTO `user_role` VALUES (2, 'user', '普通用户', NULL);

SET FOREIGN_KEY_CHECKS = 1;
